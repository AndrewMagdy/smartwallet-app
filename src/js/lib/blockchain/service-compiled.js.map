{"version":3,"sources":["service.js"],"names":[],"mappings":";;;;;;;;AAMA;AACA;AACA;AACA;;AATA;;AACA;;;;AACA;;;;AACA;;;;AAQA;;;;;;;;AACA,IAAM,mBAAmB,iBAAO,UAAhC;AACA,iBAAO,UAAP,GAAoB,SAAS,UAAT,CAAoB,GAApB,EAAyB;AACzC,QAAI,QAAQ,WAAZ,EAAyB;AACrB,cAAM,QAAN;AACH;AACD,WAAO,iBAAiB,GAAjB,CAAP;AACH,CALD;AAMA;AACA;;AAEA,IAAI,OAAO,IAAX;;IAEM,iB;AACF,iCAAc;AAAA;;AACV,aAAK,QAAL,GAAgB,6BAAhB;AACA,aAAK,cAAL,GAAsB,IAAtB;AACA,aAAK,IAAL,GAAY,IAAZ;AACA,aAAK,QAAL,GAAgB,KAAhB;AACA,aAAK,WAAL,GAAmB,IAAnB;AACH;;;;wCAEe,E,EAAI;AAChB,iBAAK,cAAL,GAAsB,EAAtB;AACA,gBAAI,eAAe,iCAAuB;AACtC,sBAAM,KAAK,QAD2B;AAEtC,oCAAoB,KAAK;AAFa,aAAvB,CAAnB;AAIA,iBAAK,IAAL,GAAY,kBAAS,YAAT,CAAZ;AACA,mBAAO,KAAK,IAAZ;AACH;;;8BAEK,I,EAAM,Q,EAAU;AAClB,qCAAS,WAAT,CAAqB;AACjB,0BAAU,QADO;AAEjB,4BAAY;AAFK,aAArB,EAOG,UAAU,GAAV,EAAe,EAAf,EAAmB;;AAElB;AACA;AACA;AACA,mBAAG,eAAH,CAAmB,QAAnB,EAA6B,UAAU,GAAV,EAAe,YAAf,EAA6B;AACtD,wBAAI,GAAJ,EAAS,MAAM,GAAN;;AAET;AACA;AACA,uBAAG,kBAAH,CAAsB,YAAtB,EAAoC,CAApC;AACA,wBAAI,YAAY,GAAG,YAAH,EAAhB;AACA,4BAAQ,GAAR,CAAY,SAAZ;;AAEA,uBAAG,gBAAH,GAAsB,UAAU,QAAV,EAAoB;AACtC,4BAAI,KAAK,KAAK,QAAd;AACA,iCAAS,IAAT,EAAe,EAAf;AACH,qBAHD;;AAKA;AACA;;AAEA,yBAAK,eAAL,CAAqB,EAArB;AACA,yBAAK,YAAL,CAAkB,SAAlB;AACA,yBAAK,eAAL,CAAqB,UAAU,CAAV,CAArB;;AAGA;AACA,yBAAK,yBAAL;AACA,yBAAK,0BAAL;AAGH,iBA3B4B,CA2B3B,IA3B2B,CA2BtB,IA3BsB,CAA7B;AA4BH,aAjCE,CAiCD,IAjCC,CAiCI,IAjCJ,CAPH;AA2CH;;;wCAEe,O,EAAS;AACrB,iBAAK,WAAL,GAAmB,OAAnB;AACH;;;iCAEQ,O,EAAS;;AAEd,gBAAI,aAAa,yBAAS,kBAAT,CAA4B,OAA5B,CAAjB;AACA,gBAAI,WAAW,2EAAf;AACA,gBAAI,OAAO,QAAX;AACA;AACA,gBAAI,WAAW,KAAK,QAApB;;AAEA,iBAAK,KAAL,CAAW,IAAX,EAAiB,QAAjB;;AAEA,mBAAO,IAAP;AACH;;;kEAGyC,O,EAAS;AAC/C,gBAAI,UAAU,GAAG,UAAH,EAAd;AACA,oBAAQ,cAAR,CAAuB,OAAvB,EAAgC,KAAhC;AACA,gBAAI,UAAU,IAAd;AACA,gBAAI,SAAS,QAAQ,SAAR,CAAkB,OAAlB,EAA2B,KAA3B,CAAb;AACA,mBAAO,MAAP;AAEH;;;;;AAGD;;qCAEa,S,EAAW;AACpB;AACA,oBAAQ,GAAR,CAAY,UAAZ;AACA,gBAAI,UAAU,CAAd;AAHoB;AAAA;AAAA;;AAAA;AAIpB,qCAAgB,SAAhB,8HAA2B;AAAtB,2BAAsB;;AACvB,wBAAI,QAAQ,KAAK,IAAL,CAAU,OAAV,CAAkB,KAAK,IAAL,CAAU,GAAV,CAAc,UAAd,CAAyB,OAAO,OAAhC,CAAlB,EAA4D,OAA5D,EAAqE,QAArE,CAA8E,EAA9E,CAAZ;AACA,4BAAQ,GAAR,CAAY,UAAU,GAAV,GAAgB,KAAhB,GAAwB,MAApC;AACH;AAPmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASvB;;;oDAE2B;AACxB,oBAAQ,GAAR,CAAY,2BAAZ;AACA;AACA,gBAAI,UAAU,CAAC;AACX,0BAAU,IADC;AAEX,wBAAQ,CAAC,EAAC,MAAM,EAAP,EAAW,MAAM,SAAjB,EAAD,CAFG;AAGX,sBAAM,aAHK;AAIX,yBAAS,CAAC,EAAC,MAAM,EAAP,EAAW,MAAM,OAAjB,EAAD,CAJE;AAKX,yBAAS,KALE;AAMX,sBAAM;AANK,aAAD,EAOX;AACC,0BAAU,IADX;AAEC,wBAAQ,CAAC,EAAC,MAAM,gBAAP,EAAyB,MAAM,SAA/B,EAAD,CAFT;AAGC,sBAAM,eAHP;AAIC,yBAAS,CAAC,EAAC,MAAM,EAAP,EAAW,MAAM,OAAjB,EAAD,CAJV;AAKC,yBAAS,KALV;AAMC,sBAAM;AANP,aAPW,EAcX;AACC,0BAAU,IADX;AAEC,wBAAQ,EAFT;AAGC,sBAAM,SAHP;AAIC,yBAAS,CAAC,EAAC,MAAM,EAAP,EAAW,MAAM,SAAjB,EAAD,CAJV;AAKC,yBAAS,KALV;AAMC,sBAAM;AANP,aAdW,EAqBX;AACC,0BAAU,IADX;AAEC,wBAAQ,EAFT;AAGC,sBAAM,0BAHP;AAIC,yBAAS,CAAC,EAAC,MAAM,EAAP,EAAW,MAAM,SAAjB,EAAD,CAJV;AAKC,yBAAS,KALV;AAMC,sBAAM;AANP,aArBW,EA4BX;AACC,0BAAU,KADX;AAEC,wBAAQ,CAAC,EAAC,MAAM,OAAP,EAAgB,MAAM,OAAtB,EAAD,CAFT;AAGC,sBAAM,eAHP;AAIC,yBAAS,EAJV;AAKC,yBAAS,KALV;AAMC,sBAAM;AANP,aA5BW,EAmCX,EAAC,QAAQ,EAAT,EAAa,SAAS,KAAtB,EAA6B,MAAM,aAAnC,EAnCW,EAmCwC;AAClD,2BAAW,KADuC;AAElD,wBAAQ,CAAC,EAAC,SAAS,IAAV,EAAgB,MAAM,SAAtB,EAAiC,MAAM,SAAvC,EAAD,EAAoD;AACxD,6BAAS,KAD+C;AAExD,0BAAM,YAFkD;AAGxD,0BAAM;AAHkD,iBAApD,CAF0C;AAOlD,sBAAM,eAP4C;AAQlD,sBAAM;AAR4C,aAnCxC,CAAd;AA6CA,gBAAI,2BAA2B,4CAA/B;;AAEA,gBAAI,YAAY,oBAAoB,KAAK,GAAL,EAApC;AACA,gBAAI,WAAW,KAAK,IAAL,CAAU,GAAV,CAAc,QAAd,CAAuB,OAAvB,EAAgC,EAAhC,CAAmC,wBAAnC,CAAf;AACA,gBAAI,eAAe,eAAnB;AACA,gBAAI,OAAO,EAAX;AACA,iBAAK,IAAL,CAAU,SAAV;AACA,gBAAI,WAAW,CAAf;AACA,gBAAI,QAAQ,WAAW,QAAX,IAAuB,MAAnC;AACA,gBAAI,WAAW,WAAf;AACA,gBAAI,MAAM,OAAV;;AAEA,iBAAK,IAAL,CAAU,EAAC,MAAM,KAAK,WAAZ,EAAyB,OAAO,KAAhC,EAAuC,UAAU,QAAjD,EAA2D,KAAK,GAAhE,EAAV;AACA,gBAAI,WAAW,SAAX,QAAW,CAAU,GAAV,EAAe,MAAf,EAAuB;AAClC,wBAAQ,GAAR,CAAY,YAAY,GAAxB;AACA,wBAAQ,GAAR,CAAY,aAAa,MAAzB;AACH,aAHD;AAIA,iBAAK,IAAL,CAAU,QAAV;AACA,qBAAS,YAAT,EAAuB,KAAvB,CAA6B,IAA7B,EAAmC,IAAnC;AAEH;;;+BAEM,I,EAAM;AACT,gBAAI,MAAM,KAAK,QAAL,EAAV,CADS,CACgB;AACzB,gBAAI,MAAM,EAAV;AACA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,IAAI,MAAxB,EAAgC,KAAK,CAArC;AACI,uBAAO,OAAO,YAAP,CAAoB,SAAS,IAAI,MAAJ,CAAW,CAAX,EAAc,CAAd,CAAT,EAA2B,EAA3B,CAApB,CAAP;AADJ,aAEA,OAAO,GAAP;AACH;;;qDAE4B;AACzB,oBAAQ,GAAR,CAAY,0BAAZ;;AAEA;AACA,gBAAI,UAAU,CAAC;AACX,0BAAU,IADC;AAEX,wBAAQ,CAAC,EAAC,MAAM,EAAP,EAAW,MAAM,SAAjB,EAAD,CAFG;AAGX,sBAAM,aAHK;AAIX,yBAAS,CAAC,EAAC,MAAM,EAAP,EAAW,MAAM,OAAjB,EAAD,CAJE;AAKX,yBAAS,KALE;AAMX,sBAAM;AANK,aAAD,EAOX;AACC,0BAAU,IADX;AAEC,wBAAQ,CAAC,EAAC,MAAM,gBAAP,EAAyB,MAAM,SAA/B,EAAD,CAFT;AAGC,sBAAM,eAHP;AAIC,yBAAS,CAAC,EAAC,MAAM,EAAP,EAAW,MAAM,OAAjB,EAAD,CAJV;AAKC,yBAAS,KALV;AAMC,sBAAM;AANP,aAPW,EAcX;AACC,0BAAU,IADX;AAEC,wBAAQ,EAFT;AAGC,sBAAM,SAHP;AAIC,yBAAS,CAAC,EAAC,MAAM,EAAP,EAAW,MAAM,SAAjB,EAAD,CAJV;AAKC,yBAAS,KALV;AAMC,sBAAM;AANP,aAdW,EAqBX;AACC,0BAAU,IADX;AAEC,wBAAQ,EAFT;AAGC,sBAAM,0BAHP;AAIC,yBAAS,CAAC,EAAC,MAAM,EAAP,EAAW,MAAM,SAAjB,EAAD,CAJV;AAKC,yBAAS,KALV;AAMC,sBAAM;AANP,aArBW,EA4BX;AACC,0BAAU,KADX;AAEC,wBAAQ,CAAC,EAAC,MAAM,OAAP,EAAgB,MAAM,OAAtB,EAAD,CAFT;AAGC,sBAAM,eAHP;AAIC,yBAAS,EAJV;AAKC,yBAAS,KALV;AAMC,sBAAM;AANP,aA5BW,EAmCX,EAAC,QAAQ,EAAT,EAAa,SAAS,KAAtB,EAA6B,MAAM,aAAnC,EAnCW,EAmCwC;AAClD,2BAAW,KADuC;AAElD,wBAAQ,CAAC,EAAC,SAAS,IAAV,EAAgB,MAAM,SAAtB,EAAiC,MAAM,SAAvC,EAAD,EAAoD;AACxD,6BAAS,KAD+C;AAExD,0BAAM,YAFkD;AAGxD,0BAAM;AAHkD,iBAApD,CAF0C;AAOlD,sBAAM,eAP4C;AAQlD,sBAAM;AAR4C,aAnCxC,CAAd;;AA8CA,gBAAI,2BAA2B,4CAA/B;AACA,gBAAI,WAAW,KAAK,IAAL,CAAU,GAAV,CAAc,QAAd,CAAuB,OAAvB,EAAgC,EAAhC,CAAmC,wBAAnC,CAAf;;AAEA,gBAAI,YAAY,SAAS,aAAT,CAAuB,OAAO,KAAK,WAAnC,CAAhB;AACA,wBAAY,UAAU,MAAV,CAAiB,CAAjB,CAAZ,CAtDyB,CAsDO;AAChC,wBAAY,KAAK,MAAL,CAAY,SAAZ,CAAZ;AACA,oBAAQ,GAAR,CAAY,gCAAZ;AACA,oBAAQ,GAAR,CAAY,SAAZ;AAEH;;;sCACa,I,EAAM,G,EAAI,Q,EAAS;;AAE7B,gBAAI,UAAU,YAAY,OAA1B;AACA,gBAAI,UAAU,YAAY,OAA1B;;AAEA,gBAAI,QAAQ,GAAZ;;AAEA,iBAAK,cAAL,CAAoB,eAApB,CAAoC,QAApC,EAA8C,UAAU,GAAV,EAAe,YAAf,EAA6B;;AAEvE,oBAAI,cAAc,KAAK,WAAvB;;AAEA;AACA,oBAAI,YAAY;AACZ,8BAAU,WADE;AAEZ,8BAAU,OAFE;AAGZ,2BAAO,CAHK;AAIZ,2BAAO,KAJK;AAKZ,0BAAM;AALM,iBAAhB;;AASA;AACA,oBAAI,eAAe,QAAQ,gBAAR,CAAyB,WAAzB,EAAsC,SAAtC,CAAnB;AACA,oBAAI,WAAW,QAAQ,MAAR,CAAe,eAAf,EAAgC,YAAhC,EAA8C,aAAa,EAA3D,EAA+D,WAA/D,CAAf;;AAEA,yBAAS,QAAT,EAAkB,aAAa,IAA/B;AACH,aAnB6C,CAmB5C,IAnB4C,CAmBvC,IAnBuC,CAA9C;AAsBC;;;;;;eAMM,iB;;;;;;;;;kCAnST,gB;;kCAUF,I;;kCAEE,iB","file":"service-compiled.js","sourcesContent":["import {keystore,txutils,signing} from 'eth-lightwallet'\nimport Web3 from 'web3'\nimport HookedWeb3Provider from 'hooked-web3-provider'\nimport BigNumber from 'big-number'\n\n\n// WORKARROUND\n// TODO: migrate to webpack 2\n// https://github.com/ConsenSys/eth-lightwallet/issues/102\n// start\n\nimport crypto from 'crypto'\nconst sourceCreateHash = crypto.createHash\ncrypto.createHash = function createHash(alg) {\n    if (alg === 'ripemd160') {\n        alg = 'rmd160'\n    }\n    return sourceCreateHash(alg)\n}\n// end\n//-----------------------------------------------\n\nlet web3 = null\n\nclass BlockchainService {\n    constructor() {\n        this.gethHost = 'http://193.175.133.233:8545'\n        this.globalKeystore = null\n        this.web3 = null\n        this.password = 'mpo'\n        this.mainAddress = '0x';\n    }\n\n    setWeb3Provider(ks) {\n        this.globalKeystore = ks;\n        let web3Provider = new HookedWeb3Provider({\n            host: this.gethHost,\n            transaction_signer: this.globalKeystore\n        })\n        this.web3 = new Web3(web3Provider)\n        web3 = this.web3\n    }\n\n    login(seed, password) {\n        keystore.createVault({\n            password: password,\n            seedPhrase: seed,\n            // seedPhrase: seedPhrase, // Optionally provide a 12-word seed phrase\n            // salt: fixture.salt,     // Optionally provide a salt.\n            // A unique salt will be generated otherwise.\n            // hdPathString: hdPath    // Optional custom HD Path String\n        }, function (err, ks) {\n\n            // Some methods will require providing the `pwDerivedKey`,\n            // Allowing you to only decrypt private keys on an as-needed basis.\n            // You can generate that value with this convenient method:\n            ks.keyFromPassword(password, function (err, pwDerivedKey) {\n                if (err) throw err;\n\n                // generate two new address/private key pairs\n                // the corresponding private keys are also encrypted\n                ks.generateNewAddress(pwDerivedKey, 2);\n                let addresses = ks.getAddresses();\n                console.log(addresses);\n\n                ks.passwordProvider = function (callback) {\n                    let pw = this.password;\n                    callback(null, pw);\n                };\n\n                // Now set ks as transaction_signer in the hooked web3 provider\n                // and you can start using web3 using the keys/addresses in ks!\n\n                this.setWeb3Provider(ks)\n                this._getBalances(addresses)\n                this._setMainAddress(addresses[0])\n\n\n                //TESTS\n                this._testWriteToSmartContract();\n                this._testReadFromSmartContract();\n\n\n            }.bind(this))\n        }.bind(this))\n\n\n    }\n\n    _setMainAddress(address) {\n        this.mainAddress = address\n    }\n\n    register(entropy) {\n\n        let randomSeed = keystore.generateRandomSeed(entropy)\n        let testSeed = \"mandate print cereal style toilet hole cave mom heavy fork network indoor\";\n        let seed = testSeed;\n        // the seed is stored encrypted by a user-defined password\n        let password = this.password;\n\n        this.login(seed, password)\n\n        return seed\n    }\n\n\n    _computeCompressedPublicKeyFromPrivateKey(privKey) {\n        let keyPair = ec.genKeyPair();\n        keyPair._importPrivate(privKey, 'hex');\n        let compact = true;\n        let pubKey = keyPair.getPublic(compact, 'hex');\n        return pubKey;\n\n    };\n\n\n    /*\n     */\n    _getBalances(addresses) {\n        //TODO: implement async in react actions\n        console.log(\"Balances\")\n        let address = 0\n        for (address of addresses) {\n            let ether = this.web3.fromWei(this.web3.eth.getBalance(\"0x\" + address), 'ether').toString(10)\n            console.log(address + \" \" + ether + \" ETH\")\n        }\n\n    }\n\n    _testWriteToSmartContract() {\n        console.log(\"test write smart contract\")\n        //testsmartcontract deployed in ropsten testnet\n        let testABI = [{\n            constant: true,\n            inputs: [{name: \"\", type: \"address\"}],\n            name: \"webIDLookup\",\n            outputs: [{name: \"\", type: \"bytes\"}],\n            payable: false,\n            type: \"function\"\n        }, {\n            constant: true,\n            inputs: [{name: \"personaAddress\", type: \"address\"}],\n            name: \"getAttributes\",\n            outputs: [{name: \"\", type: \"bytes\"}],\n            payable: false,\n            type: \"function\"\n        }, {\n            constant: true,\n            inputs: [],\n            name: \"version\",\n            outputs: [{name: \"\", type: \"uint256\"}],\n            payable: false,\n            type: \"function\"\n        }, {\n            constant: true,\n            inputs: [],\n            name: \"previousPublishedVersion\",\n            outputs: [{name: \"\", type: \"address\"}],\n            payable: false,\n            type: \"function\"\n        }, {\n            constant: false,\n            inputs: [{name: \"webID\", type: \"bytes\"}],\n            name: \"setAttributes\",\n            outputs: [],\n            payable: false,\n            type: \"function\"\n        }, {inputs: [], payable: false, type: \"constructor\"}, {\n            anonymous: false,\n            inputs: [{indexed: true, name: \"_sender\", type: \"address\"}, {\n                indexed: false,\n                name: \"_timestamp\",\n                type: \"uint256\"\n            }],\n            name: \"AttributesSet\",\n            type: \"event\"\n        }];\n        let testSmartContractAddress = \"0x7cbea15468484786e682d27250a5980abe4a7f47\";\n\n        let attribute = \"test attribute \" + Date.now()\n        let contract = this.web3.eth.contract(testABI).at(testSmartContractAddress)\n        let functionName = \"setAttributes\";\n        let args = []\n        args.push(attribute);\n        let valueEth = 0\n        let value = parseFloat(valueEth) * 1.0e18\n        let gasPrice = 50000000000\n        let gas = 3141592\n\n        args.push({from: this.mainAddress, value: value, gasPrice: gasPrice, gas: gas})\n        let callback = function (err, txhash) {\n            console.log('error: ' + err)\n            console.log('txhash: ' + txhash)\n        }\n        args.push(callback);\n        contract[functionName].apply(this, args);\n\n    }\n\n    _hex2a(hexx) {\n        let hex = hexx.toString()//force conversion\n        let str = ''\n        for (let i = 0; i < hex.length; i += 2)\n            str += String.fromCharCode(parseInt(hex.substr(i, 2), 16))\n        return str\n    }\n\n    _testReadFromSmartContract() {\n        console.log(\"test read smart contract\")\n\n        //testsmartcontract deployed in ropsten testnet\n        let testABI = [{\n            constant: true,\n            inputs: [{name: \"\", type: \"address\"}],\n            name: \"webIDLookup\",\n            outputs: [{name: \"\", type: \"bytes\"}],\n            payable: false,\n            type: \"function\"\n        }, {\n            constant: true,\n            inputs: [{name: \"personaAddress\", type: \"address\"}],\n            name: \"getAttributes\",\n            outputs: [{name: \"\", type: \"bytes\"}],\n            payable: false,\n            type: \"function\"\n        }, {\n            constant: true,\n            inputs: [],\n            name: \"version\",\n            outputs: [{name: \"\", type: \"uint256\"}],\n            payable: false,\n            type: \"function\"\n        }, {\n            constant: true,\n            inputs: [],\n            name: \"previousPublishedVersion\",\n            outputs: [{name: \"\", type: \"address\"}],\n            payable: false,\n            type: \"function\"\n        }, {\n            constant: false,\n            inputs: [{name: \"webID\", type: \"bytes\"}],\n            name: \"setAttributes\",\n            outputs: [],\n            payable: false,\n            type: \"function\"\n        }, {inputs: [], payable: false, type: \"constructor\"}, {\n            anonymous: false,\n            inputs: [{indexed: true, name: \"_sender\", type: \"address\"}, {\n                indexed: false,\n                name: \"_timestamp\",\n                type: \"uint256\"\n            }],\n            name: \"AttributesSet\",\n            type: \"event\"\n        }];\n\n        let testSmartContractAddress = \"0x7cbea15468484786e682d27250a5980abe4a7f47\"\n        let contract = this.web3.eth.contract(testABI).at(testSmartContractAddress)\n\n        let attribute = contract.getAttributes(\"0x\" + this.mainAddress)\n        attribute = attribute.substr(2) //remove 0x\n        attribute = this._hex2a(attribute)\n        console.log(\"Attribute from Ropsten Testnet\")\n        console.log(attribute)\n\n    }\n    signAContract(code, abi,callback){\n\n        var txutils = lightwallet.txutils;\n        var signing = lightwallet.signing;\n\n        var nonce = 100;\n\n        this.globalKeystore.keyFromPassword(password, function (err, pwDerivedKey) {\n\n            var sendingAddr = this.mainAddress;\n\n            // The transaction data follows the format of ethereumjs-tx\n            var txOptions = {\n                gasPrice: 10000000000,\n                gasLimit: 3000000,\n                value: 1,\n                nonce: nonce,\n                data: code\n            }\n\n\n            // sendingAddr is needed to compute the contract address\n            var contractData = txutils.createContractTx(sendingAddr, txOptions);\n            var signedTx = signing.signTx(global_keystore, pwDerivedKey, contractData.tx, sendingAddr);\n\n            callback(signedTx,contractData.addr);\n        }.bind(this))\n\n\n        }\n\n\n\n}\n\nexport default BlockchainService\n"]}